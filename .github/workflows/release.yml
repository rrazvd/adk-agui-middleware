name: Create Release with LLM-Generated Notes

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for proper diff generation

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv tool install build

    - name: Build package
      run: |
        uv tool run --from build pyproject-build

    - name: Verify build artifacts
      run: |
        ls -la dist/
        echo "BUILD_WHL=$(ls dist/*.whl)" >> $GITHUB_ENV
        echo "BUILD_TARGZ=$(ls dist/*.tar.gz)" >> $GITHUB_ENV

    - name: Get previous tag
      id: previoustag
      run: |
        # Get the previous tag (before the current one)
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed -n '2p')
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, use the first commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Generate git diff
      id: gitdiff
      run: |
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        PREVIOUS_TAG=${{ steps.previoustag.outputs.tag }}

        echo "Generating diff between $PREVIOUS_TAG and $CURRENT_TAG"

        # Generate comprehensive diff information
        echo "## Commits" > diff_info.txt
        git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s (%h) by %an" >> diff_info.txt

        echo -e "\n\n## Files Changed" >> diff_info.txt
        git diff $PREVIOUS_TAG..$CURRENT_TAG --stat >> diff_info.txt

        echo -e "\n\n## Detailed Changes" >> diff_info.txt
        git diff $PREVIOUS_TAG..$CURRENT_TAG --no-color >> diff_info.txt

        # Save diff for the next step
        cat diff_info.txt

    - name: Generate Release Notes with LLM
      id: generate_notes
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE: ${{ secrets.AI_ENDPOINT }}
        AI_MODEL: ${{ vars.AI_MODEL }}
      run: |
        # Install required dependencies for API call
        uv pip install --system openai

        # Create Python script to call OpenAI-compatible API
        cat > generate_release_notes.py << 'EOFPYTHON'
        import os
        import sys
        from openai import OpenAI

        def generate_release_notes(diff_content, current_tag):
            # Get configuration from environment
            api_key = os.environ.get("OPENAI_API_KEY")
            api_base = os.environ.get("OPENAI_API_BASE")
            model = os.environ.get("AI_MODEL", "gpt-4")

            if not api_key:
                print("Warning: OPENAI_API_KEY not set, using fallback", file=sys.stderr)
                return None

            # Initialize OpenAI client with custom base URL if provided
            client_kwargs = {"api_key": api_key}
            if api_base:
                client_kwargs["base_url"] = api_base

            client = OpenAI(**client_kwargs)

            prompt = f"""Based on the following git diff and commit history for version {current_tag}, please generate comprehensive and professional release notes.

        The release notes should include:
        1. A brief summary of the release (2-3 sentences)
        2. **New Features** - List any new features or capabilities
        3. **Improvements** - List enhancements to existing features
        4. **Bug Fixes** - List any bug fixes
        5. **Breaking Changes** - List any breaking changes (if any)
        6. **Other Changes** - Any other notable changes

        Format the output in clean Markdown. Be concise but informative. Focus on user-facing changes.

        Git Diff and Commit History:
        ```
        {diff_content}
        ```

        Please generate the release notes now:"""

            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[
                        {"role": "system", "content": "You are a technical writer specialized in creating clear and professional release notes for software projects."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=2000,
                    temperature=0.7
                )

                return response.choices[0].message.content
            except Exception as e:
                print(f"Error calling LLM API: {e}", file=sys.stderr)
                return None

        def create_fallback_notes(diff_content, current_tag):
            """Create basic release notes from diff content"""
            return f"""## Release {current_tag}

        ### Changes
        This release includes the following changes. See the commit history for detailed information.

        {diff_content[:1500]}
        """

        if __name__ == "__main__":
            current_tag = os.environ.get("GITHUB_REF", "").replace("refs/tags/", "")

            # Read diff content
            with open("diff_info.txt", "r") as f:
                diff_content = f.read()

            # Try to generate LLM-powered release notes
            release_notes = generate_release_notes(diff_content, current_tag)

            # Fallback to basic notes if LLM fails
            if not release_notes:
                print("⚠️  LLM generation failed, using fallback format", file=sys.stderr)
                release_notes = create_fallback_notes(diff_content, current_tag)

            # Save to file
            with open("release_notes.md", "w") as f:
                f.write(release_notes)

            print("Release notes generated successfully!")
            print("\n" + "="*50)
            print(release_notes)
            print("="*50)
        EOFPYTHON

        # Run the Python script
        python generate_release_notes.py

        # Verify the file was created
        if [ ! -f release_notes.md ]; then
          echo "❌ Failed to generate release notes, creating minimal fallback"
          echo "## Release ${GITHUB_REF#refs/tags/}" > release_notes.md
          echo "" >> release_notes.md
          echo "See commits for details." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: false  # We're using our own LLM-generated notes
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release notes as artifact
      uses: actions/upload-artifact@v5
      with:
        name: release-notes
        path: |
          release_notes.md
          diff_info.txt

    - name: Print Summary
      run: |
        echo "## Release Created Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
        echo "- $(basename $BUILD_WHL)" >> $GITHUB_STEP_SUMMARY
        echo "- $(basename $BUILD_TARGZ)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Notes" >> $GITHUB_STEP_SUMMARY
        cat release_notes.md >> $GITHUB_STEP_SUMMARY
